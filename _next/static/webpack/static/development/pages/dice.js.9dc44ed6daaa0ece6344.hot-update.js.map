{"version":3,"file":"static/webpack/static/development/pages/dice.js.9dc44ed6daaa0ece6344.hot-update.js","sources":["webpack:///./libs/eos-client.js"],"sourcesContent":["import ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport _ from 'lodash';\n\n// Don't forget to tell ScatterJS which plugins you are using.\nScatterJS.plugins(new ScatterEOS());\n\n// Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\nconst network = {\n  mainNet: {\n    blockchain: 'eos',\n    protocol: 'https',\n    host: 'nodes.get-scatter.com',\n    port: 443,\n    chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'\n  },\n  tokamaklabs: {\n    blockchain: 'eos',\n    protocol: 'http',\n    host: '104.199.192.77',\n    port: 8888,\n    chainId: 'a578eed19b3745a4e0e3a56a27f6323d3a40f6544af3368f5ff7c69dbf8fdbe7'\n  }\n};\n\nlet instancePromise = null;\n\nclass EosClient {\n\n  /**\n   * @returns {Promise<EosClient>}\n   */\n  static async getInstance () {\n    if (instancePromise == null) {\n      let instance = new EosClient();\n      instancePromise = instance.init();\n    }\n    // console.log(instance, instance.eos, instance.account);\n    return instancePromise;\n  }\n\n  shouldInit() {\n    return !!this.account;\n  }\n\n  async init() {\n    let connected = await ScatterJS.scatter.connect('BadDice');\n\n    // If the user does not have Scatter or it is Locked or Closed this will return false;\n    if (!connected) return false;\n\n    const scatter = ScatterJS.scatter;\n\n    // Now we need to get an identity from the user.\n    // We're also going to require an account that is connected to the network we're using.\n    const requiredFields = { accounts: [network.tokamaklabs] };\n    await scatter.getIdentity(requiredFields);\n\n    // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n    // the user for their account name beforehand. They could still give you a different account.\n    this.account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n\n    // You can pass in any additional options you want into the eosjs reference.\n    const eosOptions = { expireInSeconds: 60 };\n\n    // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n    this.eos = scatter.eos(network.tokamaklabs, Eos, eosOptions);\n\n    // ----------------------------\n    // Now that we have an identity,\n    // an EOSIO account, and a reference\n    // to an eosjs object we can send a transaction.\n    // ----------------------------\n\n    // Never assume the account's permission/authority. Always take it from the returned account.\n    this.transactionOptions = { authorization: [`${this.account.name}@${this.account.authority}`] };\n\n    window.ScatterJS = null;\n    return this;\n  }\n  async getMyBalance() {\n    return this.eos.getCurrencyBalance('eosio.token', this.account.name, 'EOS');\n  }\n\n  // this.eos.transfer(this.account.name, 'fairnessdice', `${parseFloat(this.state.betValue).toFixed(4)} EOS`, `${this.state.diceValue}#peter1#userseed#usermemo`, transactionOptions)\n  async transfer(quantity, memo) {\n    return this.eos.transfer(this.account.name, 'fairnessdice', quantity, memo, this.transactionOptions);\n  }\n\n  async getLatestBetReceipts(length = 1) {\n    let { actions } = await this.eos.getActions('fairnessdice', -1, -length);\n    let betReceipts = actions.filter(item => _.get(item, 'action_trace.act.name') === 'betreceipt');\n    return betReceipts.map(item => ({\n      data: _.get(item, 'action_trace.act.data'),\n      block_time: item.block_time,\n      trx_id: _.get(item, 'action_trace.trx_id'),\n    }));\n  }\n}\n\nexport default EosClient;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AACA;AACA;;;;;;;;;AAcA;AACA;AACA;;;;;;;;;;;;;AAGA;AACA;;AADA;AACA;AAEA;;;;;AAAA;AACA;;AACA;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;AAEA;AACA;;;;;;AAAA;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;AACA;;;AADA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAhEA;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AA6DA;;;;A","sourceRoot":""}